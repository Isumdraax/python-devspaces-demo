schemaVersion: 2.1.0
metadata:
  name: python-devspaces-demo
variables:
  whoami: $(oc whoami)
  token: $(oc whoami -t)
  imagename: "img-python-devspaces"
  deploymentname: "deploy-python-devspaces"
  localregistry: "image-registry.openshift-image-registry.svc:5000"
  tag: "latest"
components:
  - name: udi
    container:
      image: registry.redhat.io/devspaces/udi-rhel8@sha256:de81824e6ccf82a286a28566432d4f43928a989c570578c4b4df9484ef136cca
commands:
  - id: cleanupdeployimagestreamandimages
    exec:
      label: "0- Cleanup deploy, imagesteams and images"
      component: udi
      workingDir: ${PROJECT_SOURCE}
      commandLine: |
        oc delete deployment {{deploymentname}}; \
        oc delete bc {{imagename}}; \
        oc delete is {{imagename}}; \
        for i in $(oc get images | grep "{{localregistry}}/{{whoami}}-devspaces/{{imagename}}" | awk '{print $1}'); do oc delete image $i;done
      group:
        kind: run
  - id: buildlocally
    exec:
      label: "1- Build image locally"
      component: udi
      workingDir: ${PROJECT_SOURCE}
      commandLine: "oc new-build ."
      group:
        kind: build
        isDefault: true
  - id: createnewapp
    exec:
      label: "2- Start new app based on built image"
      component: udi
      workingDir: ${PROJECT_SOURCE}
      commandLine: "oc new-app {{imagename}}:{{tag}} --name={{deploymentname}}"
      group:
        kind: run
  - id: testnewapp
    exec:
      label: "3- Run curl command inside the pod to ensure the service is running"
      component: udi
      workingDir: ${PROJECT_SOURCE}
      commandLine: "oc exec $(oc get pod -l deployment={{deploymentname}} -o custom-columns=POD:.metadata.name --no-headers) -- curl -s http://127.0.0.1:8080"
      group:
        kind: run
