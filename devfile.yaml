schemaVersion: 2.1.0
metadata:
  name: python-devspaces-demo
variables:
  whoami: $(oc whoami)
  token: $(oc whoami -t)
  buildname: "python-devspaces"
  localregistry: "image-registry.openshift-image-registry.svc:5000"
  tag: "latest"
components:
  - name: udi
    container:
      image: registry.redhat.io/devspaces/udi-rhel8@sha256:de81824e6ccf82a286a28566432d4f43928a989c570578c4b4df9484ef136cca
commands:
  - id: cleanupdeployimagestreamandimages
    exec:
      label: "0- Cleanup deploy, imagesteams and images"
      component: udi
      workingDir: ${PROJECT_SOURCE}
      commandLine: oc delete bc,deployment,is,svc,route {{buildname}}
      group:
        kind: run
  - id: buildlocally
    exec:
      label: "1- Build image locally (not from repo)"
      component: udi
      workingDir: ${PROJECT_SOURCE}
      commandLine: |
        oc new-build --name {{buildname}} --binary --strategy docker -l "app={{buildname}}"; \
        oc start-build {{buildname}} --from-dir .
        while [[ $(oc get build -l "app={{buildname}}" -o 'jsonpath={..status.conditions[?(@.type=="Complete")].status}') != "True" ]]; do echo "waiting for build $(oc get build -l "app={{buildname}}") to complete ..." && sleep 1; done
      group:
        kind: build
        isDefault: true
  - id: createnewapp
    exec:
      label: "2- Start new app based on built image"
      component: udi
      workingDir: ${PROJECT_SOURCE}
      commandLine: "oc new-app -i {{buildname}}:{{tag}} --name {{buildname}}"
      group:
        kind: run
  - id: testnewappinsidepod
    exec:
      label: "3- Run curl command inside the pod to ensure the service is running"
      component: udi
      workingDir: ${PROJECT_SOURCE}
      commandLine: "oc exec $(oc get pod -l deployment={{buildname}} -o custom-columns=POD:.metadata.name --no-headers) -- curl -s http://127.0.0.1:8080"
      group:
        kind: run
  - id: exposenewapp
    exec:
      label: "4- Expose newapp to external world"
      component: udi
      workingDir: ${PROJECT_SOURCE}
      commandLine: |
          oc expose deployment/{{buildname}} --port 8080; \
          oc create route edge --service {{buildname}} --insecure-policy Redirect
      group:
        kind: run
  - id: rebuildapp
    exec:
      label: "5- Rebuild newapp"
      component: udi
      workingDir: ${PROJECT_SOURCE}
      commandLine: |
          oc delete bc,deployment,is {{buildname}}; \
          oc new-build --name {{buildname}} --binary --strategy docker -l "app={{buildname}}"; \
          oc start-build {{buildname}} --from-dir .; \
          while [[ $(oc get build -l "app={{buildname}}" -o 'jsonpath={..status.conditions[?(@.type=="Complete")].status}') != "True" ]]; do echo "waiting for build $(oc get build -l "app={{buildname}}") to complete ..." && sleep 1; done; \
          oc new-app -i {{buildname}}:{{tag}} --name {{buildname}}
      group:
        kind: run        
events:
  postStart:
    - "cleanupdeployimagestreamandimages"
  preStop:
    - "cleanupdeployimagestreamandimages"
